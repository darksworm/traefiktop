name: 'Test NPM Installation'
description: 'Tests argonaut npm installation and functionality across different Node.js versions'
inputs:
  node-version:
    description: 'Node.js version to test with (e.g., 18, 20, 22, latest)'
    required: true
  test-mode:
    description: 'Test mode: "release" (test published package) or "local" (test local package)'
    required: false
    default: 'release'
  package-version:
    description: 'Specific package version to test (e.g., 1.12.0). If not provided, installs latest'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: 'https://registry.npmjs.org'

    - name: Test npm installation and functionality
      shell: bash
      run: |
        echo "🟢 Testing argonaut npm installation on Node.js ${{ inputs.node-version }}"
        echo "📦 Test mode: ${{ inputs.test-mode }}"
        
        # Display Node.js and npm versions
        echo "=== Environment Information ==="
        echo "Node.js version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Platform: $(uname -s -m)"
        
        # Test npm installation with retry logic for newly published packages
        echo "=== Installing Argonaut via NPM ==="
        if [[ "${{ inputs.test-mode }}" == "local" ]]; then
          # For local testing, pack and install local package
          echo "📦 Testing local package installation"
          npm pack
          PACKAGE_FILE=$(ls argonaut-cli-*.tgz | head -1)
          echo "📁 Installing local package: $PACKAGE_FILE"
          npm install -g "$PACKAGE_FILE" || {
            echo "❌ ERROR: Failed to install local package via npm"
            exit 1
          }
        else
          # For release testing, install published package with retry logic
          echo "📦 Installing published package from npm registry"
          
          PACKAGE_NAME="argonaut-cli"
          if [[ -n "${{ inputs.package-version }}" ]]; then
            PACKAGE_NAME="argonaut-cli@${{ inputs.package-version }}"
            echo "🎯 Target version: ${{ inputs.package-version }}"
          fi
          
          echo "📦 Package to install: $PACKAGE_NAME"
          
          # Retry logic for newly published packages
          MAX_RETRIES=6
          RETRY_DELAY=30
          SUCCESS=false
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "🔄 Installation attempt $i/$MAX_RETRIES..."
            
            if npm install -g "$PACKAGE_NAME"; then
              echo "✅ Successfully installed $PACKAGE_NAME on attempt $i"
              SUCCESS=true
              break
            else
              echo "⚠️  Installation attempt $i failed"
              
              if [[ $i -lt $MAX_RETRIES ]]; then
                echo "⏳ Waiting ${RETRY_DELAY}s for package to propagate on npm registry..."
                sleep $RETRY_DELAY
                
                # Check if the version is available
                if [[ -n "${{ inputs.package-version }}" ]]; then
                  echo "🔍 Checking if version ${{ inputs.package-version }} is available..."
                  if npm view argonaut-cli@${{ inputs.package-version }} version 2>/dev/null; then
                    echo "✅ Version ${{ inputs.package-version }} is now available"
                  else
                    echo "⏳ Version ${{ inputs.package-version }} not yet available"
                  fi
                fi
              else
                echo "❌ ERROR: Failed to install $PACKAGE_NAME after $MAX_RETRIES attempts"
                echo "📄 Final npm error details:"
                npm install -g "$PACKAGE_NAME" --loglevel=verbose || true
                echo "📄 Available versions:"
                npm view argonaut-cli versions --json || true
                exit 1
              fi
            fi
          done
          
          if [[ "$SUCCESS" != "true" ]]; then
            echo "❌ ERROR: Installation failed after all retry attempts"
            exit 1
          fi
        fi
        
        echo "✅ NPM installation completed successfully"
        
        echo "=== Verifying Installation ==="
        # Check if argonaut is available in PATH (binary name from package.json bin field)
        if ! command -v argonaut >/dev/null 2>&1; then
          echo "❌ ERROR: argonaut command not found after npm installation"
          echo "📍 PATH: $PATH"
          echo "📁 NPM global bin directory: $(npm bin -g)"
          echo "📂 Contents of npm global bin:"
          ls -la "$(npm bin -g)" 2>/dev/null || echo "Directory not accessible"
          exit 1
        fi
        
        echo "✅ argonaut binary is available in PATH"
        echo "📍 Binary location: $(which argonaut)"
        echo "📊 Binary size: $(ls -lh $(which argonaut) | awk '{print $5}')"
        
        # Check npm installation details
        echo "=== NPM Installation Details ==="
        echo "📦 Installed package info:"
        npm list -g argonaut-cli --depth=0 2>/dev/null || echo "Could not retrieve package info"
        
        echo "=== Testing TUI Functionality ==="
        # Test that the npm-installed binary starts the TUI correctly
        timeout 15s bash -c '
          # Create test output file
          TESTFILE="/tmp/npm_argonaut_test"
          
          echo "🚀 Starting argonaut TUI from npm installation..."
          
          # Start argonaut TUI in background with output capture
          stdbuf -o0 -e0 argonaut > "$TESTFILE" 2>&1 &
          TUI_PID=$!
          
          echo "📋 Argonaut TUI started with PID: $TUI_PID"
          
          # Give the TUI time to initialize
          sleep 4
          
          # Check if the process is still running OR if it exited with expected TUI output
          if ! kill -0 $TUI_PID 2>/dev/null; then
            # Process exited - check if it showed the expected TUI output (auth screen)
            if grep -q "AUTHENTICATION REQUIRED\|AUTH REQUIRED\|argocd login\|Login required" "$TESTFILE" 2>/dev/null; then
              echo "✅ NPM-installed argonaut TUI started successfully and showed auth screen"
              echo "📄 TUI output (expected auth screen):"
              head -n 20 "$TESTFILE" 2>/dev/null || echo "No output to display"
              # This is success - TUI started and worked correctly
              exit 0
            else
              echo "❌ ERROR: NPM-installed argonaut TUI exited without expected output"
              echo "📄 Output from startup:"
              cat "$TESTFILE" 2>/dev/null || echo "No output captured"
              exit 1
            fi
          fi
          
          echo "✅ NPM-installed argonaut TUI is running successfully (still active)"
          
          # Attempt graceful shutdown
          echo "🔄 Attempting graceful shutdown..."
          echo "q" | timeout 3s tee /dev/stdin >/dev/null 2>&1 || {
            echo "⚠️  Could not send quit signal (expected in CI environment)"
          }
          
          # Give it time to process
          sleep 2
          
          # Force cleanup if still running
          if kill -0 $TUI_PID 2>/dev/null; then
            echo "🔄 Force stopping TUI process..."
            kill -TERM $TUI_PID 2>/dev/null || true
            sleep 1
            kill -KILL $TUI_PID 2>/dev/null || true
          fi
          
          # Wait for cleanup
          wait $TUI_PID 2>/dev/null || true
          
          echo "✅ TUI functionality test completed"
          echo "📄 TUI output sample (first 5 lines):"
          head -n 5 "$TESTFILE" 2>/dev/null || echo "No output to display"
        ' || {
          echo "❌ ERROR: NPM-installed argonaut TUI test failed"
          echo "📄 Debug information:"
          cat /tmp/npm_argonaut_test 2>/dev/null || echo "No test output available"
          exit 1
        }
        
        echo "=== Testing Cleanup ==="
        echo "🧹 Uninstalling argonaut to clean up..."
        npm uninstall -g argonaut-cli || {
          echo "⚠️  Warning: Could not uninstall argonaut-cli"
        }
        
        echo ""
        echo "🎉 ✅ ALL NPM TESTS PASSED on Node.js ${{ inputs.node-version }}"
        echo "   📦 NPM Installation: SUCCESS"
        echo "   🔍 Binary Detection: SUCCESS"
        echo "   🖥️  TUI Launch: SUCCESS"
        echo "   🔄 Process Management: SUCCESS"
        echo "   🧹 Cleanup: SUCCESS"