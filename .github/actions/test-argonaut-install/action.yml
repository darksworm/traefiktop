name: 'Test Argonaut Installation'
description: 'Tests argonaut installation and TUI functionality on different Linux distributions'
inputs:
  distro:
    description: 'Docker image to test on (e.g., ubuntu:22.04, alpine:latest)'
    required: true
  install-source:
    description: 'Source for install script (branch/tag or "latest-release")'
    required: false
    default: 'latest-release'
  test-mode:
    description: 'Test mode: "release" (test published binaries) or "script" (test install script only)'
    required: false
    default: 'release'

runs:
  using: 'composite'
  steps:
    - name: Test installation on ${{ inputs.distro }}
      shell: bash
      run: |
        INSTALL_URL="https://raw.githubusercontent.com/darksworm/argonaut/main/install.sh"
        
        # Use specific version for release tests
        if [[ "${{ inputs.install-source }}" != "latest-release" ]]; then
          INSTALL_URL="https://raw.githubusercontent.com/darksworm/argonaut/${{ inputs.install-source }}/install.sh"
        fi
        
        echo "🐳 Testing argonaut installation on ${{ inputs.distro }}"
        echo "📥 Install source: ${{ inputs.install-source }}"
        echo "🔧 Test mode: ${{ inputs.test-mode }}"
        echo "🔗 Install URL: $INSTALL_URL"
        
        docker run --rm -v ${{ github.workspace }}:/workspace ${{ inputs.distro }} sh -c '
          set -e
          echo "=== System Information ===" 
          echo "Distribution: ${{ inputs.distro }}"
          uname -a
          
          # Install required packages based on distro
          echo "=== Installing Dependencies ==="
          if command -v apt-get >/dev/null 2>&1; then
            apt-get update -qq && apt-get install -y -qq curl ca-certificates
            echo "✅ Installed dependencies via apt-get"
          elif command -v apk >/dev/null 2>&1; then
            apk add --no-cache --quiet curl ca-certificates
            echo "✅ Installed dependencies via apk (musl system detected)"
          elif command -v dnf >/dev/null 2>&1; then
            dnf install -y -q curl ca-certificates
            echo "✅ Installed dependencies via dnf"
          elif command -v yum >/dev/null 2>&1; then
            yum install -y -q curl ca-certificates
            echo "✅ Installed dependencies via yum"
          elif command -v pacman >/dev/null 2>&1; then
            pacman -Sy --noconfirm --quiet curl ca-certificates
            echo "✅ Installed dependencies via pacman"
          else
            echo "❌ ERROR: No supported package manager found"
            exit 1
          fi
          
          # Test install script syntax if testing from workspace
          if [[ "${{ inputs.test-mode }}" == "script" && -f "/workspace/install.sh" ]]; then
            echo "=== Testing Install Script Syntax ==="
            sh -n /workspace/install.sh || {
              echo "❌ ERROR: Install script has syntax errors"
              exit 1
            }
            echo "✅ Install script syntax is valid"
          fi
          
          echo "=== Installing Argonaut ==="
          if [[ "${{ inputs.test-mode }}" == "script" && -f "/workspace/install.sh" ]]; then
            # Test local install script
            sh /workspace/install.sh || {
              echo "❌ ERROR: Install script failed to execute"
              exit 1
            }
          else
            # Test published install script
            curl -fsSL "'"$INSTALL_URL"'" | sh || {
              echo "❌ ERROR: Install script failed to execute"
              exit 1
            }
          fi
          
          echo "=== Verifying Installation ==="
          if ! command -v argonaut >/dev/null 2>&1; then
            echo "❌ ERROR: argonaut command not found after installation"
            echo "PATH: $PATH"
            echo "Contents of /usr/local/bin:"
            ls -la /usr/local/bin/ 2>/dev/null || echo "Directory not found"
            exit 1
          fi
          echo "✅ Argonaut binary installed and available in PATH"
          
          # Get binary info
          echo "📍 Binary location: $(which argonaut)"
          echo "📊 Binary size: $(ls -lh $(which argonaut) | awk '\''{print $5}'\'')"
          
          echo "=== Testing TUI Functionality ==="
          timeout 15s sh -c "
            # Create a test output file
            TESTFILE=\"/tmp/argonaut_test_output\"
            
            # Start argonaut TUI in background with output capture
            stdbuf -o0 -e0 argonaut > \"\$TESTFILE\" 2>&1 &
            TUI_PID=\$!
            
            echo \"🚀 Started argonaut TUI with PID: \$TUI_PID\"
            
            # Give the TUI time to initialize
            sleep 4
            
            # Check if the process is still running OR if it exited with expected TUI output
            if ! kill -0 \$TUI_PID 2>/dev/null; then
              # Process exited - check if it showed the expected TUI output (auth screen)
              if grep -q \"AUTHENTICATION REQUIRED\\|AUTH REQUIRED\\|argocd login\\|Login required\" \"\$TESTFILE\" 2>/dev/null; then
                echo \"✅ Argonaut TUI started successfully and showed auth screen\"
                echo \"📄 TUI output (expected auth screen):\"
                head -n 20 \"\$TESTFILE\" 2>/dev/null || echo \"No output to display\"
                # This is success - TUI started and worked correctly
                exit 0
              else
                echo \"❌ ERROR: Argonaut TUI process exited without expected output\"
                echo \"📄 Output from startup:\"
                cat \"\$TESTFILE\" 2>/dev/null || echo \"No output captured\"
                exit 1
              fi
            fi
            
            echo \"✅ Argonaut TUI is running successfully (still active)\"
            
            # Attempt graceful shutdown by sending '\''q'\'' key
            echo \"🔄 Attempting graceful shutdown with '\''q'\'' key...\"
            echo '\''q'\'' | timeout 3s tee /proc/\$TUI_PID/fd/0 >/dev/null 2>&1 || {
              echo \"⚠️  Could not send quit signal via stdin (expected in containers)\"
            }
            
            # Give it a moment to process the quit command
            sleep 2
            
            # Force cleanup if still running
            if kill -0 \$TUI_PID 2>/dev/null; then
              echo \"🔄 Force stopping TUI process...\"
              kill -TERM \$TUI_PID 2>/dev/null || true
              sleep 1
              kill -KILL \$TUI_PID 2>/dev/null || true
            fi
            
            # Wait for process cleanup
            wait \$TUI_PID 2>/dev/null || true
            
            echo \"✅ TUI test completed successfully\"
            echo \"📄 TUI output sample (first 10 lines):\"
            head -n 10 \"\$TESTFILE\" 2>/dev/null || echo \"No output to display\"
          " || {
            echo "❌ ERROR: Argonaut TUI test failed"
            echo "📄 Debug output:"
            cat /tmp/argonaut_test_output 2>/dev/null || echo "No output file found"
            exit 1
          }
          
          echo ""
          echo "🎉 ✅ ALL TESTS PASSED on ${{ inputs.distro }}"
          echo "   📦 Installation: SUCCESS"
          echo "   🖥️  TUI Launch: SUCCESS"  
          echo "   🔄 Process Management: SUCCESS"
        '